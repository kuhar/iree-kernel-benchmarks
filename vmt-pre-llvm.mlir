// -----// IR Dump After GPUCheckResourceUsage (iree-codegen-gpu-check-resource-usage) //----- //
module {
  func.func @main_dispatch_0_matmul_transpose_b_1x32000x4096_f16() {
    %c8 = arith.constant 8 : index
    %c4 = arith.constant 4 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant dense<0.000000e+00> : vector<4x8xf16>
    %cst_0 = arith.constant dense<0.000000e+00> : vector<2xf16>
    %c1_i32 = arith.constant 1 : i32
    %c64_i32 = arith.constant 64 : i32
    %c2_i32 = arith.constant 2 : i32
    %c4_i32 = arith.constant 4 : i32
    %c8_i32 = arith.constant 8 : i32
    %c16_i32 = arith.constant 16 : i32
    %c32_i32 = arith.constant 32 : i32
    %cst_1 = arith.constant dense<0.000000e+00> : vector<4xf16>
    %c512 = arith.constant 512 : index
    %c4096 = arith.constant 4096 : index
    %c3 = arith.constant 3 : index
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    %cst_2 = arith.constant 0.000000e+00 : f16
    %0 = gpu.thread_id  x
    %1 = hal.interface.binding.subspan set(0) binding(0) type(storage_buffer) alignment(64) offset(%c0) flags(ReadOnly) : memref<1x4096xf16, #gpu.address_space<global>>
    memref.assume_alignment %1, 64 : memref<1x4096xf16, #gpu.address_space<global>>
    %2 = hal.interface.binding.subspan set(0) binding(1) type(storage_buffer) alignment(64) offset(%c0) flags(ReadOnly) : memref<32000x4096xf16, #gpu.address_space<global>>
    memref.assume_alignment %2, 64 : memref<32000x4096xf16, #gpu.address_space<global>>
    %3 = hal.interface.binding.subspan set(0) binding(2) type(storage_buffer) alignment(64) offset(%c0) : memref<1x32000xf16, #gpu.address_space<global>>
    memref.assume_alignment %3, 64 : memref<1x32000xf16, #gpu.address_space<global>>
    %workgroup_id_x = hal.interface.workgroup.id[0] : index
    %4 = arith.muli %workgroup_id_x, %c4 : index
    %5 = arith.muli %0, %c8 : index
    %c1_3 = arith.constant 1 : index
    %6 = arith.addi %4, %c1_3 : index
    %c2_4 = arith.constant 2 : index
    %7 = arith.addi %4, %c2_4 : index
    %c3_5 = arith.constant 3 : index
    %8 = arith.addi %4, %c3_5 : index
    %9 = scf.for %arg0 = %c0 to %c4096 step %c512 iter_args(%arg1 = %cst) -> (vector<4x8xf16>) {
      %171 = arith.addi %arg0, %5 : index
      %172 = vector.load %2[%4, %171] : memref<32000x4096xf16, #gpu.address_space<global>>, vector<8xf16>
      %173 = vector.insert %172, %cst [0] : vector<8xf16> into vector<4x8xf16>
      %174 = vector.load %2[%6, %171] : memref<32000x4096xf16, #gpu.address_space<global>>, vector<8xf16>
      %175 = vector.insert %174, %173 [1] : vector<8xf16> into vector<4x8xf16>
      %176 = vector.load %2[%7, %171] : memref<32000x4096xf16, #gpu.address_space<global>>, vector<8xf16>
      %177 = vector.insert %176, %175 [2] : vector<8xf16> into vector<4x8xf16>
      %178 = vector.load %2[%8, %171] : memref<32000x4096xf16, #gpu.address_space<global>>, vector<8xf16>
      %179 = vector.insert %178, %177 [3] : vector<8xf16> into vector<4x8xf16>
      %180 = vector.load %1[%c0, %171] : memref<1x4096xf16, #gpu.address_space<global>>, vector<8xf16>
      %181 = vector.insert %180, %cst [0] : vector<8xf16> into vector<4x8xf16>
      %182 = vector.insert %180, %181 [1] : vector<8xf16> into vector<4x8xf16>
      %183 = vector.insert %180, %182 [2] : vector<8xf16> into vector<4x8xf16>
      %184 = vector.insert %180, %183 [3] : vector<8xf16> into vector<4x8xf16>
      %185 = arith.mulf %184, %179 : vector<4x8xf16>
      %186 = arith.addf %arg1, %185 : vector<4x8xf16>
      scf.yield %186 : vector<4x8xf16>
    }
    %10 = vector.extract %9[0] : vector<8xf16> from vector<4x8xf16>
    %11 = vector.extract_strided_slice %10 {offsets = [0], sizes = [4], strides = [1]} : vector<8xf16> to vector<4xf16>
    %12 = vector.reduction <add>, %11 : vector<4xf16> into f16
    %13 = vector.insert %12, %cst_0 [0] : f16 into vector<2xf16>
    %14 = vector.extract_strided_slice %10 {offsets = [4], sizes = [4], strides = [1]} : vector<8xf16> to vector<4xf16>
    %15 = vector.reduction <add>, %14 : vector<4xf16> into f16
    %16 = vector.insert %15, %13 [1] : f16 into vector<2xf16>
    %17 = vector.bitcast %16 : vector<2xf16> to vector<1xi32>
    %18 = vector.extract %17[0] : i32 from vector<1xi32>
    %shuffleResult, %valid = gpu.shuffle  xor %18, %c1_i32, %c64_i32 : i32
    %19 = vector.splat %shuffleResult : vector<1xi32>
    %20 = vector.bitcast %19 : vector<1xi32> to vector<2xf16>
    %21 = arith.addf %16, %20 : vector<2xf16>
    %22 = vector.bitcast %21 : vector<2xf16> to vector<1xi32>
    %23 = vector.extract %22[0] : i32 from vector<1xi32>
    %shuffleResult_6, %valid_7 = gpu.shuffle  xor %23, %c2_i32, %c64_i32 : i32
    %24 = vector.splat %shuffleResult_6 : vector<1xi32>
    %25 = vector.bitcast %24 : vector<1xi32> to vector<2xf16>
    %26 = arith.addf %21, %25 : vector<2xf16>
    %27 = vector.bitcast %26 : vector<2xf16> to vector<1xi32>
    %28 = vector.extract %27[0] : i32 from vector<1xi32>
    %shuffleResult_8, %valid_9 = gpu.shuffle  xor %28, %c4_i32, %c64_i32 : i32
    %29 = vector.splat %shuffleResult_8 : vector<1xi32>
    %30 = vector.bitcast %29 : vector<1xi32> to vector<2xf16>
    %31 = arith.addf %26, %30 : vector<2xf16>
    %32 = vector.bitcast %31 : vector<2xf16> to vector<1xi32>
    %33 = vector.extract %32[0] : i32 from vector<1xi32>
    %shuffleResult_10, %valid_11 = gpu.shuffle  xor %33, %c8_i32, %c64_i32 : i32
    %34 = vector.splat %shuffleResult_10 : vector<1xi32>
    %35 = vector.bitcast %34 : vector<1xi32> to vector<2xf16>
    %36 = arith.addf %31, %35 : vector<2xf16>
    %37 = vector.bitcast %36 : vector<2xf16> to vector<1xi32>
    %38 = vector.extract %37[0] : i32 from vector<1xi32>
    %shuffleResult_12, %valid_13 = gpu.shuffle  xor %38, %c16_i32, %c64_i32 : i32
    %39 = vector.splat %shuffleResult_12 : vector<1xi32>
    %40 = vector.bitcast %39 : vector<1xi32> to vector<2xf16>
    %41 = arith.addf %36, %40 : vector<2xf16>
    %42 = vector.bitcast %41 : vector<2xf16> to vector<1xi32>
    %43 = vector.extract %42[0] : i32 from vector<1xi32>
    %shuffleResult_14, %valid_15 = gpu.shuffle  xor %43, %c32_i32, %c64_i32 : i32
    %44 = vector.splat %shuffleResult_14 : vector<1xi32>
    %45 = vector.bitcast %44 : vector<1xi32> to vector<2xf16>
    %46 = arith.addf %41, %45 : vector<2xf16>
    %47 = vector.reduction <add>, %46 : vector<2xf16> into f16
    %48 = arith.addf %47, %cst_2 : f16
    %49 = vector.extract %9[1] : vector<8xf16> from vector<4x8xf16>
    %50 = vector.extract_strided_slice %49 {offsets = [0], sizes = [4], strides = [1]} : vector<8xf16> to vector<4xf16>
    %51 = vector.reduction <add>, %50 : vector<4xf16> into f16
    %52 = vector.insert %51, %cst_0 [0] : f16 into vector<2xf16>
    %53 = vector.extract_strided_slice %49 {offsets = [4], sizes = [4], strides = [1]} : vector<8xf16> to vector<4xf16>
    %54 = vector.reduction <add>, %53 : vector<4xf16> into f16
    %55 = vector.insert %54, %52 [1] : f16 into vector<2xf16>
    %56 = vector.bitcast %55 : vector<2xf16> to vector<1xi32>
    %57 = vector.extract %56[0] : i32 from vector<1xi32>
    %shuffleResult_16, %valid_17 = gpu.shuffle  xor %57, %c1_i32, %c64_i32 : i32
    %58 = vector.splat %shuffleResult_16 : vector<1xi32>
    %59 = vector.bitcast %58 : vector<1xi32> to vector<2xf16>
    %60 = arith.addf %55, %59 : vector<2xf16>
    %61 = vector.bitcast %60 : vector<2xf16> to vector<1xi32>
    %62 = vector.extract %61[0] : i32 from vector<1xi32>
    %shuffleResult_18, %valid_19 = gpu.shuffle  xor %62, %c2_i32, %c64_i32 : i32
    %63 = vector.splat %shuffleResult_18 : vector<1xi32>
    %64 = vector.bitcast %63 : vector<1xi32> to vector<2xf16>
    %65 = arith.addf %60, %64 : vector<2xf16>
    %66 = vector.bitcast %65 : vector<2xf16> to vector<1xi32>
    %67 = vector.extract %66[0] : i32 from vector<1xi32>
    %shuffleResult_20, %valid_21 = gpu.shuffle  xor %67, %c4_i32, %c64_i32 : i32
    %68 = vector.splat %shuffleResult_20 : vector<1xi32>
    %69 = vector.bitcast %68 : vector<1xi32> to vector<2xf16>
    %70 = arith.addf %65, %69 : vector<2xf16>
    %71 = vector.bitcast %70 : vector<2xf16> to vector<1xi32>
    %72 = vector.extract %71[0] : i32 from vector<1xi32>
    %shuffleResult_22, %valid_23 = gpu.shuffle  xor %72, %c8_i32, %c64_i32 : i32
    %73 = vector.splat %shuffleResult_22 : vector<1xi32>
    %74 = vector.bitcast %73 : vector<1xi32> to vector<2xf16>
    %75 = arith.addf %70, %74 : vector<2xf16>
    %76 = vector.bitcast %75 : vector<2xf16> to vector<1xi32>
    %77 = vector.extract %76[0] : i32 from vector<1xi32>
    %shuffleResult_24, %valid_25 = gpu.shuffle  xor %77, %c16_i32, %c64_i32 : i32
    %78 = vector.splat %shuffleResult_24 : vector<1xi32>
    %79 = vector.bitcast %78 : vector<1xi32> to vector<2xf16>
    %80 = arith.addf %75, %79 : vector<2xf16>
    %81 = vector.bitcast %80 : vector<2xf16> to vector<1xi32>
    %82 = vector.extract %81[0] : i32 from vector<1xi32>
    %shuffleResult_26, %valid_27 = gpu.shuffle  xor %82, %c32_i32, %c64_i32 : i32
    %83 = vector.splat %shuffleResult_26 : vector<1xi32>
    %84 = vector.bitcast %83 : vector<1xi32> to vector<2xf16>
    %85 = arith.addf %80, %84 : vector<2xf16>
    %86 = vector.reduction <add>, %85 : vector<2xf16> into f16
    %87 = arith.addf %86, %cst_2 : f16
    %88 = vector.extract %9[2] : vector<8xf16> from vector<4x8xf16>
    %89 = vector.extract_strided_slice %88 {offsets = [0], sizes = [4], strides = [1]} : vector<8xf16> to vector<4xf16>
    %90 = vector.reduction <add>, %89 : vector<4xf16> into f16
    %91 = vector.insert %90, %cst_0 [0] : f16 into vector<2xf16>
    %92 = vector.extract_strided_slice %88 {offsets = [4], sizes = [4], strides = [1]} : vector<8xf16> to vector<4xf16>
    %93 = vector.reduction <add>, %92 : vector<4xf16> into f16
    %94 = vector.insert %93, %91 [1] : f16 into vector<2xf16>
    %95 = vector.bitcast %94 : vector<2xf16> to vector<1xi32>
    %96 = vector.extract %95[0] : i32 from vector<1xi32>
    %shuffleResult_28, %valid_29 = gpu.shuffle  xor %96, %c1_i32, %c64_i32 : i32
    %97 = vector.splat %shuffleResult_28 : vector<1xi32>
    %98 = vector.bitcast %97 : vector<1xi32> to vector<2xf16>
    %99 = arith.addf %94, %98 : vector<2xf16>
    %100 = vector.bitcast %99 : vector<2xf16> to vector<1xi32>
    %101 = vector.extract %100[0] : i32 from vector<1xi32>
    %shuffleResult_30, %valid_31 = gpu.shuffle  xor %101, %c2_i32, %c64_i32 : i32
    %102 = vector.splat %shuffleResult_30 : vector<1xi32>
    %103 = vector.bitcast %102 : vector<1xi32> to vector<2xf16>
    %104 = arith.addf %99, %103 : vector<2xf16>
    %105 = vector.bitcast %104 : vector<2xf16> to vector<1xi32>
    %106 = vector.extract %105[0] : i32 from vector<1xi32>
    %shuffleResult_32, %valid_33 = gpu.shuffle  xor %106, %c4_i32, %c64_i32 : i32
    %107 = vector.splat %shuffleResult_32 : vector<1xi32>
    %108 = vector.bitcast %107 : vector<1xi32> to vector<2xf16>
    %109 = arith.addf %104, %108 : vector<2xf16>
    %110 = vector.bitcast %109 : vector<2xf16> to vector<1xi32>
    %111 = vector.extract %110[0] : i32 from vector<1xi32>
    %shuffleResult_34, %valid_35 = gpu.shuffle  xor %111, %c8_i32, %c64_i32 : i32
    %112 = vector.splat %shuffleResult_34 : vector<1xi32>
    %113 = vector.bitcast %112 : vector<1xi32> to vector<2xf16>
    %114 = arith.addf %109, %113 : vector<2xf16>
    %115 = vector.bitcast %114 : vector<2xf16> to vector<1xi32>
    %116 = vector.extract %115[0] : i32 from vector<1xi32>
    %shuffleResult_36, %valid_37 = gpu.shuffle  xor %116, %c16_i32, %c64_i32 : i32
    %117 = vector.splat %shuffleResult_36 : vector<1xi32>
    %118 = vector.bitcast %117 : vector<1xi32> to vector<2xf16>
    %119 = arith.addf %114, %118 : vector<2xf16>
    %120 = vector.bitcast %119 : vector<2xf16> to vector<1xi32>
    %121 = vector.extract %120[0] : i32 from vector<1xi32>
    %shuffleResult_38, %valid_39 = gpu.shuffle  xor %121, %c32_i32, %c64_i32 : i32
    %122 = vector.splat %shuffleResult_38 : vector<1xi32>
    %123 = vector.bitcast %122 : vector<1xi32> to vector<2xf16>
    %124 = arith.addf %119, %123 : vector<2xf16>
    %125 = vector.reduction <add>, %124 : vector<2xf16> into f16
    %126 = arith.addf %125, %cst_2 : f16
    %127 = vector.extract %9[3] : vector<8xf16> from vector<4x8xf16>
    %128 = vector.extract_strided_slice %127 {offsets = [0], sizes = [4], strides = [1]} : vector<8xf16> to vector<4xf16>
    %129 = vector.reduction <add>, %128 : vector<4xf16> into f16
    %130 = vector.insert %129, %cst_0 [0] : f16 into vector<2xf16>
    %131 = vector.extract_strided_slice %127 {offsets = [4], sizes = [4], strides = [1]} : vector<8xf16> to vector<4xf16>
    %132 = vector.reduction <add>, %131 : vector<4xf16> into f16
    %133 = vector.insert %132, %130 [1] : f16 into vector<2xf16>
    %134 = vector.bitcast %133 : vector<2xf16> to vector<1xi32>
    %135 = vector.extract %134[0] : i32 from vector<1xi32>
    %shuffleResult_40, %valid_41 = gpu.shuffle  xor %135, %c1_i32, %c64_i32 : i32
    %136 = vector.splat %shuffleResult_40 : vector<1xi32>
    %137 = vector.bitcast %136 : vector<1xi32> to vector<2xf16>
    %138 = arith.addf %133, %137 : vector<2xf16>
    %139 = vector.bitcast %138 : vector<2xf16> to vector<1xi32>
    %140 = vector.extract %139[0] : i32 from vector<1xi32>
    %shuffleResult_42, %valid_43 = gpu.shuffle  xor %140, %c2_i32, %c64_i32 : i32
    %141 = vector.splat %shuffleResult_42 : vector<1xi32>
    %142 = vector.bitcast %141 : vector<1xi32> to vector<2xf16>
    %143 = arith.addf %138, %142 : vector<2xf16>
    %144 = vector.bitcast %143 : vector<2xf16> to vector<1xi32>
    %145 = vector.extract %144[0] : i32 from vector<1xi32>
    %shuffleResult_44, %valid_45 = gpu.shuffle  xor %145, %c4_i32, %c64_i32 : i32
    %146 = vector.splat %shuffleResult_44 : vector<1xi32>
    %147 = vector.bitcast %146 : vector<1xi32> to vector<2xf16>
    %148 = arith.addf %143, %147 : vector<2xf16>
    %149 = vector.bitcast %148 : vector<2xf16> to vector<1xi32>
    %150 = vector.extract %149[0] : i32 from vector<1xi32>
    %shuffleResult_46, %valid_47 = gpu.shuffle  xor %150, %c8_i32, %c64_i32 : i32
    %151 = vector.splat %shuffleResult_46 : vector<1xi32>
    %152 = vector.bitcast %151 : vector<1xi32> to vector<2xf16>
    %153 = arith.addf %148, %152 : vector<2xf16>
    %154 = vector.bitcast %153 : vector<2xf16> to vector<1xi32>
    %155 = vector.extract %154[0] : i32 from vector<1xi32>
    %shuffleResult_48, %valid_49 = gpu.shuffle  xor %155, %c16_i32, %c64_i32 : i32
    %156 = vector.splat %shuffleResult_48 : vector<1xi32>
    %157 = vector.bitcast %156 : vector<1xi32> to vector<2xf16>
    %158 = arith.addf %153, %157 : vector<2xf16>
    %159 = vector.bitcast %158 : vector<2xf16> to vector<1xi32>
    %160 = vector.extract %159[0] : i32 from vector<1xi32>
    %shuffleResult_50, %valid_51 = gpu.shuffle  xor %160, %c32_i32, %c64_i32 : i32
    %161 = vector.splat %shuffleResult_50 : vector<1xi32>
    %162 = vector.bitcast %161 : vector<1xi32> to vector<2xf16>
    %163 = arith.addf %158, %162 : vector<2xf16>
    %164 = vector.reduction <add>, %163 : vector<2xf16> into f16
    %165 = arith.addf %164, %cst_2 : f16
    %166 = vector.insertelement %48, %cst_1[%c0 : index] : vector<4xf16>
    %167 = vector.insertelement %87, %166[%c1 : index] : vector<4xf16>
    %168 = vector.insertelement %126, %167[%c2 : index] : vector<4xf16>
    %169 = vector.insertelement %165, %168[%c3 : index] : vector<4xf16>
    %170 = arith.cmpi eq, %0, %c0 : index
    scf.if %170 {
      vector.store %169, %3[%c0, %4] : memref<1x32000xf16, #gpu.address_space<global>>, vector<4xf16>
    }
    return
  }
}
